name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-lint:
    name: Build, Test, and Lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fider_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      minio:
        image: getfider/minio:0.0.2
        ports:
          - 9000:9000
        env:
          MINIO_ACCESS_KEY: s3user
          MINIO_SECRET_KEY: s3user-s3cr3t
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      COMMITHASH: ${{ github.sha }}
      VERSION: ${{ github.ref_name }}
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/fider_test?sslmode=disable
      NODE_ENV: test
      BLOB_STORAGE_S3_ENDPOINT_URL: http://localhost:9000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Tidy Go modules
        run: go mod tidy

      - name: Install Node.js dependencies with npm ci
        run: npm ci

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v6

      - name: Install godotenv-cli
        run: go install github.com/joho/godotenv/cmd/godotenv@latest

      - name: Lint server code
        run: make lint-server

      - name: Lint UI code
        run: make lint-ui

      - name: Build the application
        run: make build

      - name: Run server unit tests
        run: make test-server

      - name: Run UI unit tests
        run: make test-ui

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-test-lint
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: wushie/fider:latest,wushie/fider:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Add Cloudflare GPG key
        run: |
          sudo mkdir -p --mode=0755 /usr/share/keyrings
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null

      - name: Add Cloudflare repo to APT sources
        run: |
          echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared any main' | sudo tee /etc/apt/sources.list.d/cloudflared.list

      - name: Install cloudflared
        run: sudo apt-get update && sudo apt-get install -y cloudflared

      - name: SSH via Cloudflare Tunnel
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o "StrictHostKeyChecking=no" \
              -o "ProxyCommand=cloudflared access ssh --hostname linux.wush.site" \
              softwaredev@linux.wush.site

      ## For ip public server deployment, uncomment the following steps
      # - name: SSH into server and deploy
      #   uses: cross-the-world/ssh-scp-ssh-pipelines@latest
      #   env:
      #     REPO_URL: ${{ github.repositoryUrl }}
      #     PROJECT_DIR: /home/user/prod
      #   with:
      #     host: ${{ secrets.DC_HOST }}
      #     user: ${{ secrets.DC_USER }}
      #     pass: ${{ secrets.DC_PASS }}
      #     port: ${{ secrets.DC_PORT }}
      #     connect_timeout: 10s
      #     first_ssh: |
      #       echo "Cloning repository..."
      #       rm -rf ${{ env.PROJECT_DIR }}
      #       git clone ${{ env.REPO_URL }} ${{ env.PROJECT_DIR }}
      #       cd ${{ env.PROJECT_DIR }}
      #       echo "Running docker compose down..."
      #       docker compose down -f docker-compose-prod.yml
      #       echo "Running docker compose up -d..."
      #       docker compose -f docker-compose-prod.yml up -d